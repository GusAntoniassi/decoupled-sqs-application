AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  This is the main template for the application, with
  all the resources defined as nested CloudFormation
  stacks.

Parameters:
  EnvironmentName:
    Description: The name of the environment we're deploying, used in tags and for resource identification
    Type: String
    Default: decoupled-sqs-application

Mappings: 
  AWSRegionToEC2Ami: # Corresponds to amzn2-ami-hvm-2.0.20191217.0-x86_64-gp2 AMI
    us-east-1: 
      ami: "ami-062f7200baf2fa504"
    us-east-2: 
      ami: "ami-02ccb28830b645a41"
    us-west-1: 
      ami: "ami-03caa3f860895f82e"
    us-west-2: 
      ami: "ami-04590e7389a6e577c"
    ap-east-1: 
      ami: "ami-db3d78aa"
    ap-south-1: 
      ami: "ami-0217a85e28e625474"
    ap-northeast-2: 
      ami: "ami-0bea7fd38fabe821a"
    ap-southeast-1: 
      ami: "ami-05c64f7b4062b0a21"
    ap-southeast-2: 
      ami: "ami-0b8b10b5bf11f3a22"
    ap-northeast-1: 
      ami: "ami-011facbea5ec0363b"
    ca-central-1: 
      ami: "ami-0a269ca7cc3e3beff"
    eu-central-1: 
      ami: "ami-07cda0db070313c52"
    eu-west-1: 
      ami: "ami-0713f98de93617bb4"
    eu-west-2: 
      ami: "ami-0089b31e09ac3fffc"
    eu-west-3: 
      ami: "ami-007fae589fdf6e955"
    eu-north-1: 
      ami: "ami-0662eb9b9b8685935"
    me-south-1: 
      ami: "ami-05f93aaf03b9bf20c"
    sa-east-1: 
      ami: "ami-09de7b4017733e2af"

Resources:
  VPC:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        EnvironmentName: !Ref EnvironmentName
      Tags:
        - Key: Project
          Value: !Ref EnvironmentName
      TemplateURL: !Sub
          - "${bucketUrl}/vpc/vpc.yml"
          - bucketUrl: !ImportValue "templates-bucket-BucketUrl"

  StaticWebsite:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        EnvironmentName: !Ref EnvironmentName
      Tags:
        - Key: Project
          Value: !Ref EnvironmentName
      TemplateURL: !Sub
          - "${bucketUrl}/s3/static-website.yml"
          - bucketUrl: !ImportValue "templates-bucket-BucketUrl"

  DynamoDB:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        # These are testing values. Ideally for this kind of workload you would use on-demand DynamoDB
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      Tags:
        - Key: Project
          Value: !Ref EnvironmentName
      TemplateURL: !Sub
          - "${bucketUrl}/dynamodb/voting-database.yml"
          - bucketUrl: !ImportValue "templates-bucket-BucketUrl"

  SQS:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        EnvironmentName: !Ref EnvironmentName
      Tags:
        - Key: Project
          Value: !Ref EnvironmentName
      TemplateURL: !Sub
          - "${bucketUrl}/sqs/voting-queue.yml"
          - bucketUrl: !ImportValue "templates-bucket-BucketUrl"

  Lambda:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        SQSQueueName: !GetAtt SQS.Outputs.QueueName
        LambdaName: !Sub "${EnvironmentName}-voting-lambda"
        TemplatesBucketName: !ImportValue "templates-bucket-BucketName"
      Tags:
        - Key: Project
          Value: !Ref EnvironmentName
      TemplateURL: !Sub
          - "${bucketUrl}/lambda/voting-lambda.yml"
          - bucketUrl: !ImportValue "templates-bucket-BucketUrl"

  APIGateway:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        LambdaArn: !GetAtt Lambda.Outputs.LambdaArn
        LambdaName: !GetAtt Lambda.Outputs.LambdaName
        ApiGatewayResourcePath: "vote"
      Tags:
        - Key: Project
          Value: !Ref EnvironmentName
      TemplateURL: !Sub
          - "${bucketUrl}/api-gateway/voting-api-gateway.yml"
          - bucketUrl: !ImportValue "templates-bucket-BucketUrl"

  EC2:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        VpcId: !GetAtt VPC.Outputs.VpcID
        Subnets: !GetAtt VPC.Outputs.SubnetIDs
        InstanceType: t3.nano
        QueueName: !GetAtt SQS.Outputs.QueueName
        QueueURL: !GetAtt SQS.Outputs.QueueURL
        DynamoTableName: !GetAtt DynamoDB.Outputs.TableName
        InstanceAMI: !FindInMap 
          - AWSRegionToEC2Ami
          - !Ref AWS::Region
          - ami
        SpotPrice: 0.002 # You might change this based on your instance type
      Tags:
        - Key: Project
          Value: !Ref EnvironmentName
      TemplateURL: !Sub
          - "${bucketUrl}/ec2/processing-spot-instances.yml"
          - bucketUrl: !ImportValue "templates-bucket-BucketUrl"

Outputs:
  ApiGatewayUrl:
    Description: URL of the API Gateway
    Value: !GetAtt APIGateway.Outputs.ApiGatewayInvokeURL
  StaticWebsiteBucketName:
    Description: Name of the static website bucket
    Value: !GetAtt StaticWebsite.Outputs.BucketName
  StaticWebsiteBucketUrl:
    Description: URL of the static website bucket
    Value: !GetAtt StaticWebsite.Outputs.BucketURL
  TableName:
    Description: Name of the DynamoDB table
    Value: !GetAtt DynamoDB.Outputs.TableName