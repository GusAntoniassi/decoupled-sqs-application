AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template deploys an AWS Lambda that records the current
  vote, along with some request information, to an SQS queue.
  
Parameters:
  EnvironmentName:
    Description: This specifies the name of the environment
    Type: String
  SQSQueueName:
    Description: The SQS queue name where the lambda will send the vote message
    Type: String
  LambdaName:
    Description: The lambda function's name
    Type: String
  TemplatesBucketName:
    Description: The name of the bucket the source code resides in
    Type: String

Resources:
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref LambdaName
      Description: "This lambda function receives a vote and registers it on SQS for later processing"
      Handler: "index.handler"
      MemorySize: 128
      Role: !GetAtt "LambdaIAMRole.Arn"
      Runtime: "python3.7"
      Timeout: 10
      Code:
        # @TODO: pass this to a zip file, currently when I tried I got some "Unable to import module 'index'" errors
        ZipFile: | 
          import sys, json, boto3

          def handler(event,context):
            vote = ''
            
            responseHeaders = {
              'Content-Type': 'text/plain',
              'Access-Control-Allow-Origin': '*'
            }

            try:
              body = json.loads(event['body'])
              vote = body['Vote']
            except:
              e = sys.exc_info()
              
              return {
                'body': 'Invalid payload {0}\nError decoding JSON: {1}'.format(event['body'], str(e)),
                'headers': responseHeaders,
                'statusCode': 500
              }
              
            try:
              # Get the service resource
              sqs = boto3.resource('sqs')
              
              # Get the queue
              queue = sqs.get_queue_by_name(QueueName='decoupled-sqs-application-voting-queue')
              
              messageBody = '{{"Vote": "{0}"}}'.format(vote)
              
              # Create a new message
              response = queue.send_message(MessageBody=messageBody)
              
              # The response is NOT a resource, but gives you a message ID and MD5
              messageId = response.get('MessageId')
            except Exception as e:
              print(e)
              
              return {
                'body': 'Error sending queue message: {0}'.format(str(e)),
                'headers': responseHeaders,
                'statusCode': 500
              }
            
            return {
              'body': '{0}'.format(messageId),
              'headers': responseHeaders,
              'statusCode': 200
            }
            
  LambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${EnvironmentName}-lambda-iam-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaName}:*"
          PolicyName: !Sub "${LambdaName}-iam-logging-access"
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "sqs:ListQueues"
                  - "sqs:ListQueueTags"
                  - "sqs:GetQueueAttributes"
                  - "sqs:GetQueueUrl"
                  - "sqs:SendMessage"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${SQSQueueName}"
          PolicyName: !Sub "${LambdaName}-iam-sqs-access"
  LambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 90

Outputs:
  LambdaArn:
    Description: "Lambda's Amazon Resource Name (ARN)"
    Value: !GetAtt "LambdaFunction.Arn"
    Export:
      Name: !Sub "${AWS::StackName}-lambda-arn"
  LambdaName:
    Description: "Lambda function's name"
    Value: !Ref LambdaName
    Export:
      Name: !Sub "${AWS::StackName}-lambda-name"