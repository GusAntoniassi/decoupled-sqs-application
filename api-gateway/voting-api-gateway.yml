AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  This template deploys an API gateway with a resource
  to the /vote path, pointing to an AWS Lambda function.

Parameters:
  EnvironmentName:
    Description: This specifies the name of the environment
    Type: String
  ApiGatewayResourcePath:
    Description: This is the path of the resource that will be created
    Type: String
  LambdaName:
    Type: String
  LambdaArn:
    Type: String

Resources:
  ApiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub "${EnvironmentName}-voting-apig"
      Description: "Gateway for the voting API"

  ApiGatewayVoteResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt
        - ApiGateway
        - "RootResourceId"
      PathPart: !Ref ApiGatewayResourcePath
      RestApiId: !Ref ApiGateway

  ApiGatewayVoteMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
      ResourceId: !Ref ApiGatewayVoteResource
      RestApiId: !Ref ApiGateway
  
  ApiGatewayOptionsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "OPTIONS"
      Integration:
        Type: "MOCK"
        IntegrationResponses:
          - ResponseParameters: 
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: 200
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters: 
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          StatusCode: 200
      ResourceId: !Ref ApiGatewayVoteResource
      RestApiId: !Ref ApiGateway

  ApiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - ApiGatewayVoteMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: "v1"

  LambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref LambdaArn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/*"

Outputs:
  ApiGatewayInvokeURL:
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/v1/${ApiGatewayResourcePath}"
  FunctionName:
    Value: !Ref LambdaArn
  SourceArn:
    Value: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/${LambdaName}"
